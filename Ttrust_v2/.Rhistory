vst <- varianceStabilizingTransformation(dds)
saveData(dds, vst)
#Alpha FDR cutoffs
alphaSummary(
object = dds,
contrast = c(
factor = "day",
numerator = "7",
denominator = "0"
),
alpha = c(0.1, 0.05)
)
res <- results(
object = dds,
name = "day_7_vs_0",
alpha = 0.05
)
saveData(res)
#Plot Mean Average (MA) Plot
plotMeanAverage(res)
#Plot Volcano Plot
plotVolcano(res)
#Gene Expression Heatmap
plotDEGHeatmap(results = res, counts = vst)
degPlot(
bcb,
res = res,
n = 3,
slot = "vst",
log = TRUE,
ann = c("geneID", "geneName"),
xs = "day"
)
library("DEGreport")
degPlot(
bcb,
res = res,
n = 3,
slot = "vst",
log = TRUE,
ann = c("geneID", "geneName"),
xs = "day"
)
dds_lrt <- DESeq(dds, test = "LRT", reduced = Ëœ1)
res_lrt <- results(dds_lrt)
ma <- counts(bcb, "vst")[significants(res, fc = 2), ]
res_patterns <- degPatterns(
ma = ma,
metadata = colData(bcb),
time = "day",
minc = 60
)
saveData(dds_lrt, res_lrt, res_patterns)
res_patterns[["plot"]]
dds_lrt <- DESeq(dds, test = "LRT", reduced = 1)
res_lrt <- results(dds_lrt)
ma <- counts(bcb, "vst")[significants(res, fc = 2), ]
res_patterns <- degPatterns(
ma = ma,
metadata = colData(bcb),
time = "day",
minc = 60
)
saveData(dds_lrt, res_lrt, res_patterns)
res_patterns[["plot"]]
#Detecting patterns
dds_lrt <- DESeq(dds, test = "LRT", reduced = 1)
#Summary Analysis
res_tbl <- resultsTables(res, lfc = 1)
topTables(res_tbl, n = 5)
# Generate the gene IDs for the DE list of genes and the background list of genes
library(clusterProfiler)
all_genes <- rownames(res) %>%
.[!is.na(res[["padj"]])] %>%
as.character()
sig_genes <- significants(
object = res,
fc = 1,
padj = 0.05
)
library"("clusterProfiler"")
library("clusterProfiler)
# Load the pre-saved object
library(bcbioRNASeq)
loadRemoteData("https://github.com/hbc/bcbioRNASeq/raw/f1000v2/data/bcb.rda")
#exporting quantified data
raw <- counts(bcb, normalized = FALSE)
normalized <- counts(bcb, normalized = TRUE)
tpm <- counts(bcb, normalized = "tpm")
rlog <- counts(bcb, normalized = "rlog")
vst <- counts(bcb, normalized = "vst")
saveData(raw, normalized, tpm, rlog, vst)
writeCounts(raw, normalized, tpm, rlog, vst)
#read statistics
plotTotalReads(bcb)
plotMappingRate(bcb)
#Genomic Context
plotExonicMappingRate(bcb)
plotIntronicMappingRate(bcb)
#Number of genes detected
plotGenesDetected(bcb)
library("clusterProfiler")
#install libraries and dependencies
source("https://bioconductor.org/biocLite.R")
library("clusterProfiler")
biocLite("clusterProfiler")
library("clusterProfiler")
source("https://bioconductor.org/biocLite.R")
biocLite(c("devtools","remotes","GenomeInfoDbData","hbc/bcbioRNASeq","clusterProfiler"),
dependencies = c("Depends", "Imports", "Suggests"),ask=FALSE) #automatically installs and updates dependencies
library("clusterProfiler")
install.packages(tidyvers)
install.packages('tidyverse')
suppressMessages( library( tidyverse ) )
library( tidyverse )
library( edgeR )
library( stringr )
source("http://bioconductor.org/biocLite.R")
biocLite("devtools")    # only if devtools not yet installed
biocLite("COMBINE-lab/wasabi")
# Library -----------------------------------------------------------------
library(wasabi)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
devtools::install_github("pachterlab/sleuth")
# Installation ------------------------------------------------------------
source("http://bioconductor.org/biocLite.R")
biocLite("devtools")    # only if devtools not yet installed
biocLite("COMBINE-lab/wasabi")
?load()
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("ChIPseeker")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("TxDb.Hsapiens.UCSC.hg38.knownGene")
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("org.Hs.eg.db")
library(ChIPseeker,TxDb.Hsapiens.UCSC.hg38.knownGene,org.Hs.eg.db)
library('ChIPseeker','TxDb.Hsapiens.UCSC.hg38.knownGene','org.Hs.eg.db')
# Library -----------------------------------------------------------------
library('DESeq2')
library("tximport")
library("readr")
library("tximportData")
library("pasilla")
library("IHW")
library('DESeq2')
library("tximport")
library("readr")
library("tximportData")
library("pasilla")
library("IHW")
## ----setup, echo=FALSE, results="hide"-----------------------------------
knitr::opts_chunk$set(tidy=FALSE, cache=TRUE,
dev="png",
message=FALSE, error=FALSE, warning=TRUE)
dir <- system.file("extdata", package="tximportData")
samples <- read.table(file.path(dir,"samples.txt"), header=TRUE)
samples$condition <- factor(rep(c("A","B"),each=3))
rownames(samples) <- samples$run
samples[,c("pop","center","run","condition")]
print('Loading Libraries')
library(wasabi)
library('cowplot')
suppressMessages({library("sleuth")})
library('biomaRt')
library("dplyr")
install.packages("BiocManager")
R
chooseCRANmirror()
install.packages("BiocManager")
install.packages("BiocManager")
#install.packages("BiocManager")
library('BiocManager')
install.packages("BiocManager")
#install.packages("BiocManager")
library('BiocManager')
#doesn't check if already installed
BiocManager::install(c("devtools","COMBINE-lab/wasabi","rhdf5","biomaRt"))
BiocManager::install('DeSeq2')
if (!require("BiocManager")) {
install.packages("BiocManager")
}
BiocManager::install("remotes")
BiocManager::install("remotes")
BiocManager::install("remotes")
library(bcbioRNASeq)
upload_dir <- system.file("extdata/bcbio", package = "bcbioRNASeq")
bcb <- bcbioRNASeq(
uploadDir = upload_dir,
interestingGroups = c("ctrl","ko"),
organism = "Homo sapiens"
)
bcb <- bcbioRNASeq(
uploadDir = upload_dir,
organism = "Homo sapiens"
)
?makeSummarizedExperiment
genes <- c(
"EGFP",  # transgene
"gene1",
"gene2",
"gene3"
)
samples <- c(
"sample1",
"sample2",
"sample3",
"sample4"
)
# Example matrix
mat <- matrix(
seq(1L:16L),
nrow = 4L,
ncol = 4L,
dimnames = list(genes, samples)
)
mat
# Primary assay must be named "counts"
assays = list(counts = mat)
assays
# rowRanges won't contain transgenes or spike-ins
rowRanges <- GRanges(
seqnames = c("1", "1", "1"),
ranges = IRanges(
start = c(1L, 101L, 201L),
end = c(100L, 200L, 300L)
)
)
names(rowRanges) <- c("gene1", "gene2", "gene3")
colData <- data.frame(
genotype = c(
"wildtype",
"wildtype",
"knockout",
"knockout"
),
age = c(3L, 6L, 3L, 6L),
row.names = samples
)
rowRanges
colData
rownames(assay)
makeSummarizedExperiment(
assays = assays,
rowRanges = rowRanges,
colData = colData,
transgeneNames = "EGFP"
)
View(colData)
library(bcbioRNASeq)
upload_dir <- system.file("extdata/bcbio", package = "bcbioRNASeq")
bcb <- bcbioRNASeq(
uploadDir = upload_dir,
interestingGroups = c("group"),
organism = "Homo sapiens"
)
rownames(assay)
rownames(rowRanges)
makeSummarizedExperiment(
assays = assays,
rowRanges = rowRanges,
colData = colData,
transgeneNames = "EGFP"
)
rowRanges
colData
library('sleuth')
Correlation: You are probably doing it wrong
========================================================
author: Rafael A. Irizarry
date:
autosize: true
```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse)
library(ggplot2)
library(dslabs)
ds_theme_set()
install.packages('dslabs')
library(dslabs)
ds_theme_set()
```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse)
library(ggplot2)
library(dslabs)
ds_theme_set()
```
library(tidyverse)
library(ggplot2)
knitr::opts_chunk$set(eval=TRUE,cache=TRUE)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("genefu")
library('tidyverse')
version
install.packages('tidyverse')
install.packages("tidyverse")
library('tidyverse')
library(tidyverse)
?strsplit
list.of.packages <- c("BiocManager", "getopt","limma", "edgeR", "glmnet", "sva", "openxlsx", "ggplot2", "gridExtra", "heatmap.plus", "plyr", "data.table", "viridis", "squash", "survcomp", "survminer", "scales", "rms", "stackoverflow", "WGCNA", "fitdistrplus", "impute", "pcaMethods", "pROC", "VennDiagram", "mclust", "multiMiR", "biomaRt", "devtools", "arcdiagram")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){install.packages(new.packages)} else {lapply(list.of.packages, require, character.only = TRUE)}
# Library -----------------------------------------------------------------
list.of.packages <- c("EBSeq","tidyverse","rlang")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){BiocManager::install(new.packages, update = TRUE)} else {lapply(list.of.packages, require, character.only = TRUE)}
install.packages('installr');library(installr)
list.of.packages <- c("tibble","readr",'BiocManager','DESeq2',"dplyr","data.table","tximport","tximportData","pasilla","IHW","tidyr")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)){BiocManager::install(new.packages)} else {lapply(list.of.packages, require, character.only = TRUE)}
Rtools()
Sys.getenv('PATH')
install.packages("BiocManager")
list.of.packages <- c("fgsea","data.table","ggplot2","GSA","dplyr","stats")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){BiocManager::install(new.packages, update = TRUE)} else {lapply(list.of.packages, require, character.only = TRUE)}
list.of.packages <- c("fgsea","data.table","ggplot2","GSA","dplyr","stats")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){BiocManager::install(new.packages, update = TRUE)} else {lapply(list.of.packages, require, character.only = TRUE)}
df <- read.csv('C://Users//Nathan//Documents//@Harvard//Artem//Transcription Factor Analysis//Trust_v2//trrust_rawdata.human.csv',
head = FALSE,sep=',')
df <- read.csv('C://Users//Nathan//Documents//@Harvard//Artem//Transcription Factor Analysis//Trust_v2//trrust_rawdata.human.tsv',
head = FALSE,sep='\t')
View(df)
columns(df)<- c('TF','Target','Interaction','Pubmed_ID')
column(df)<- c('TF','Target','Interaction','Pubmed_ID')
colnames(df) <- c('TF','Target','Interaction','Pubmed_ID')
View(df)
# Libraries ---------------------------------------------------------------
list.of.packages <- c("fgsea","data.table","ggplot2","GSA","dplyr","stats","tidyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){BiocManager::install(new.packages, update = TRUE)} else {lapply(list.of.packages, require, character.only = TRUE)}
BiocManager::install('cluster', update = TRUE)
# Libraries ---------------------------------------------------------------
list.of.packages <- c("fgsea","data.table","ggplot2","GSA","dplyr","stats","tidyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){BiocManager::install(new.packages, update = TRUE)} else {lapply(list.of.packages, require, character.only = TRUE)}
# Load Data ---------------------------------------------------------------
df <- read.csv('C://Users//Nathan//Documents//@Harvard//Artem//Transcription Factor Analysis//Trust_v2//trrust_rawdata.human.tsv',
head = FALSE,sep='\t')
colnames(df) <- c('TF','Target','Interaction','Pubmed_ID')
# Function ----------------------------------------------------------------
txt_to_gmt <- function(df){
x <- vector(mode="character", length=length(unique(df[,1])))
y <- vector(mode="character", length=length(unique(df[,1])))
n=1
for (i in unique(df[,1])){
tmp<-subset(df,TF==i)
x[n] <- i
y[n] <- c(paste(tmp$Target, collapse = "\t"))
n=n+1
}
return(data.frame(x, y, stringsAsFactors=FALSE))
}
getwd()
install.packages('cgdsr')
# Create CGDS object
mycgds = CGDS("https://www.cbioportal.org/")
library('cgdsr')
# Create CGDS object
mycgds = CGDS("https://www.cbioportal.org/")
test(mycgds)
# Get list of cancer studies at server
getCancerStudies(mycgds)
# Get available case lists (collection of samples) for a given cancer study
mycancerstudy = getCancerStudies(mycgds)[2,1]
mycaselist = getCaseLists(mycgds,mycancerstudy)[1,1]
# Get available genetic profiles
mygeneticprofile = getGeneticProfiles(mycgds,mycancerstudy)[4,1]
# Get data slices for a specified list of genes, genetic profile and case list
getProfileData(mycgds,c('BRCA1','BRCA2'),mygeneticprofile,mycaselist)
# Create CGDS object
mycgds = CGDS("https://www.cbioportal.org/")
test(mycgds)
# Get list of cancer studies at server
getCancerStudies(mycgds)
# Get available case lists (collection of samples) for a given cancer study
mycancerstudy = getCancerStudies(mycgds)[2,1]
mycaselist = getCaseLists(mycgds,mycancerstudy)[1,1]
# Get available genetic profiles
mygeneticprofile = getGeneticProfiles(mycgds,mycancerstudy)[4,1]
# Get data slices for a specified list of genes, genetic profile and case list
getProfileData(mycgds,c('BRCA1','BRCA2'),mygeneticprofile,mycaselist)
?getProfileData
# Get data slices for a specified list of genes, genetic profile and case list
getProfileData(mycgds,c('BRCA1','BRCA2'),mygeneticprofile,mycaselist)
mycgds
mycancerstudy
help('CGDS')
head()getCancerStudies(mycgds)
head(getCancerStudies(mycgds))
getCancerStudies(mycgds)[2,1]
getCaseLists(mycgds,mycancerstudy)[1,1]
getGeneticProfiles(mycgds,mycancerstudy)[4,1]
head(getGeneticProfiles(mycgds,mycancerstudy))
# Get available case lists (collection of samples) for a given cancer study
mycancerstudy = getCancerStudies(mycgds)[2,1]
mycaselist = getCaseLists(mycgds,mycancerstudy)[1,1]
# Get available genetic profiles
mygeneticprofile = getGeneticProfiles(mycgds,mycancerstudy)[4,1]
getGeneticProfiles(mycgds,mycancerstudy)[4,1]
getGeneticProfiles(mycgds,mycancerstudy)[3,1]
getGeneticProfiles(mycgds,mycancerstudy)[:,1]
getGeneticProfiles(mycgds,mycancerstudy)[,1]
getGeneticProfiles(mycgds,mycancerstudy)[2,1]
# Get available genetic profiles
mygeneticprofile = getGeneticProfiles(mycgds,mycancerstudy)[2,1]
# Get data slices for a specified list of genes, genetic profile and case list
getProfileData(mycgds,c('BRCA1','BRCA2'),mygeneticprofile,mycaselist)
# Get clinical data for the case list
myclinicaldata = getClinicalData(mycgds,mycaselist)
myclinicaldata
View(myclinicaldata)
# Library -----------------------------------------------------------------
list.of.packages <- c("tibble","readr",'BiocManager','DESeq2',"dplyr","data.table","tximport","tximportData","pasilla","IHW","tidyr")
#new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#if(length(new.packages)){BiocManager::install(new.packages)} else {lapply(list.of.packages, require, character.only = TRUE)}
suppressMessages(lapply(list.of.packages, require, character.only = TRUE))
# Function ----------------------------------------------------------------
deseq2_statistics<-function(dsTxi){ #input DESeqDataSet
#statistic test:WaldTest
dsTxi <- estimateSizeFactors(dsTxi)
dsTxi <- estimateDispersions(dsTxi)
dsTxi <- nbinomWaldTest(dsTxi)
return(dsTxi)
}
DESeq2_run<-function(sample_df,design,output_name){
#import different sample subsets
dsTxi_response <- DESeqDataSetFromTximport(ds,
colData = sample_df,
design = design)
#statistics
dsTxi_response<-deseq2_statistics(dsTxi_response)
#save object
save(dsTxi_response,file=paste(output_name,".DESeqobj",sep=""))
#results save
write.table(data.frame(results(dsTxi_response)),
file=paste(output_name,"DESeq2results.tsv",sep="."),sep = "\t")
}
argv=c('./data/DGE1/postqc-counts.csv', './data/DGE1/postqc-meta.csv', 'Drug/bx-912,Concentration/0', 'Drug/Drug control')
if( length(argv) < 4 )
{
cat( "Usage: Rscript DESeq2-analysis.R <counts table> <metadata table> <Group 1> <Group 2>\n" )
cat( 'Example: Rscript edge.R ../data/postqc-counts.csv ../data/postqc-meta.csv Drug/IKK16,Concentration/1 Drug/IKK16,Concentration/1\n' )
stop( "Invalid number of arguments" )
}
#test if CSV or TSV
if (tail(unlist(strsplit(argv[1],'[.]')),n=1) == 'csv'){
counts=read.csv(argv[1],sep=',',row.names = 1)
} else {
counts=read.csv(argv[1],sep='\t',row.names = 1)
}
if (tail(unlist(strsplit(argv[2],'[.]')),n=1) == 'csv'){
meta=read.csv(argv[2],sep=',')
} else {
meta=read.csv(argv[2],sep='\t')
}
?read.csv
if( !require(devtools) ) install.packages("devtools")
library('devtools')
devtools::install_github("ArtemSokolov/indRa")
list.of.packages<-c("coda", "dplyr", "ggnetwork", "ggrepel", "igraph", "intergraph", "network", "reticulate", "sna", "statnet.common")
#checks if already installed, if not goes into list of new.packages
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
#install if not available, load if available [TODO]
if(length(new.packages)){BiocManager::install(new.packages, update = TRUE)} else {lapply(list.of.packages, require, character.only = TRUE)}
if (!requireNamespace("remotes", quietly = TRUE))
install.packages("remotes")
remotes::install_github("clemenshug/enrichr.db")
library('BiocManager')
#doesn't check if already installed
BiocManager::install(c("devtools","COMBINE-lab/wasabi","rhdf5","biomaRt"))
#BiocManager Libraries
#'Normal' Libraries
chooseCRANmirror() #65 == NY
#install.packages("BiocManager")
library('BiocManager')
#doesn't check if already installed
BiocManager::install(c("devtools","COMBINE-lab/wasabi","rhdf5","biomaRt"))
install.packages(c("devtools", "roxygen2", "testthat", "knitr"))
library(devtools)
has_devel()
?has_devel
?has_devel
?has_devel()
has_compiler()
library(pkgbuild)
has_compiler()
check_compiler()
library(roxygen2)
library(testthat)
devtools::session_info()
# Libraries ---------------------------------------------------------------
print("Loading Libraries")
list.of.packages <- c("fgsea","data.table","ggplot2","GSA","dplyr","stats","tidyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)){BiocManager::install(new.packages, update = TRUE)} else {lapply(list.of.packages, require, character.only = TRUE)}
# Load Data ---------------------------------------------------------------
df <- read.csv('C://Users//Nathan//Documents//@Harvard//Artem//Transcription Factor Analysis//Trust_v2//trrust_rawdata.human.tsv',
head = FALSE,sep='\t')
colnames(df) <- c('TF','Target','Interaction','Pubmed_ID')
df <- read.csv('C:/Users/Nathan/Documents/@Harvard/Artem/Transcription Factor Analysis/git/Transcription-Factor-Databases/Ttrust_v2/trrust_rawdata.human.tsv',
head = FALSE,sep='\t')
df <- read.csv('C://Users//Nathan//Documents//@Harvard//Artem//Transcription Factor Analysis//git//Transcription-Factor-Databases//Ttrust_v2//trrust_rawdata.human.tsv',
head = FALSE,sep='\t')
colnames(df) <- c('TF','Target','Interaction','Pubmed_ID')
df <- read.csv('C://Users//Nathan//Documents//@Harvard//Artem//Transcription Factor Analysis//git//Transcription-Factor-Databases//Ttrust_v2//trrust_rawdata.human.tsv',
head = FALSE,sep='\t')
setwd('C://Users//Nathan//Documents//@Harvard//Artem//Transcription Factor Analysis//git//Transcription-Factor-Databases//Ttrust_v2//')
